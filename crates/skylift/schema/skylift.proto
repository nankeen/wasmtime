syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

package skylift;

/*
interface CompilerBuilder {
    # Sets the target of compilation to the target specified.
    target = 0 (target :Triple);

    # Returns the currently configured target triple that compilation will
    # produce artifacts for.
    triple = 1 () -> (triple :Triple);

    # Compiler-specific method to configure various settings in the compiler
    # itself.
    # This is expected to be defined per-compiler. Compilers should return
    # errors for unknown names/values.
    set = 2 (name :Text, val :Text);

    # Compiler-specific method for configuring settings.
    # Same as `set` except it is exclusively for enabling boolean flags.
    enable = 3 (name :Text);

    # Returns a list of all possible settings that can be configured with
    # `set` and `enable`.
    settings = 4 () -> (settings :List(Setting));

    # Builds a new [`Compiler`] object from this configuration.
    build = 5 () -> (compiler: Compiler);
}
*/

service Compiler {
  rpc NewBuilder(google.protobuf.Empty) returns (NewBuilderResponse);
  // CompilerBuilder 
  rpc SetTarget(Triple) returns (google.protobuf.Empty);
  rpc GetTriple(google.protobuf.Empty) returns (Triple);
  rpc SetSettings(SetRequest) returns (google.protobuf.Empty);
  rpc EnableSettings(EnableRequest) returns (google.protobuf.Empty);
  rpc GetSettings(google.protobuf.Empty) returns (SettingsResponse);
  rpc Build(google.protobuf.Empty) returns (BuildResponse);

  // Compiler
  rpc CompileFunction(CompileFunctionRequest) returns (CompiledFunction);
  // rpc EmitObj(EmitObjRequest) returns EmitObjectResponse;
  // rpc EmitTrampolineObj(EmitTrampolineObjRequest) returns EmitTrampolineObjResponse;
  rpc GetFlags(google.protobuf.Empty) returns (FlagMap);
  rpc GetISAFlags(google.protobuf.Empty) returns (FlagMap);
  rpc SetTranslation(ModuleTranslation) returns (google.protobuf.Empty);
}

message FlagMap {
  // This is a serialized version of BTreeMap<String, FlagValue>
  google.protobuf.Any flags = 1;
}

message CompiledFunction {
  // TODO define compiled function
}

message FunctionBodyData {
  message FunctionBody {
    uint64 offset = 1;
    bytes data = 2;
    // FIXME Missing allow_memarg64, which should need to be determined if important
  }

  message FuncValidator {
    message OperatorValidator {
      message Local {
        uint32 index = 1;
        Type type = 2;
      }

      enum Type {
        I32 = 0;
        I64 = 1;
        F32 = 2;
        F64 = 3;
        V128 = 4;
        FUNC_REF = 5;
        EXTERN_REF = 6;
        EXN_REF = 7;
        FUNC = 8;
        EMPTY_BLOCK_TYPE = 9;
      }

      uint32 num_locals = 1;
      repeated Local locals = 2;

    /*
    // The total number of locals that this function contains
    num_locals: u32,
    // This is a "compressed" list of locals for this function. The list of
    // locals are represented as a list of tuples. The second element is the
    // type of the local, and the first element is monotonically increasing as
    // you visit elements of this list. The first element is the maximum index
    // of the local, after the previous index, of the type specified.
    //
    // This allows us to do a binary search on the list for a local's index for
    // `local.{get,set,tee}`. We do a binary search for the index desired, and
    // it either lies in a "hole" where the maximum index is specified later,
    // or it's at the end of the list meaning it's out of bounds.
    locals: Vec<(u32, Type)>,

    // The `operands` is the current type stack, and the `control` list is the
    // list of blocks that we're currently in.
    pub(crate) operands: Vec<Option<Type>>,
    control: Vec<Frame>,

    // This is a list of flags for wasm features which are used to gate various
    // instructions.
    pub(crate) features: WasmFeatures,
    */
    }
    OperatorValidator validator = 1;
  }

  // TODO define function body data
  FunctionBody body = 1;
  FuncValidator validator = 2;
}

message CompileFunctionRequest {
  uint32 index = 1;
  FunctionBodyData data = 2;
  google.protobuf.Any types = 3;
  google.protobuf.Any tunables = 4;
}

message ModuleTranslation {
  // Use serde serialize
  google.protobuf.Any module = 1;
  repeated uint32 escaped_funcs = 2;
  repeated uint32 exported_signatures = 3;
  // Ommitted fields
  // DebugInfoData debuginfo = 4;
  // bool has_unparsed_debuginfo = 4;

}

message NewBuilderResponse {
  string remote_id = 1;
}

message BuildResponse {
  string remote_id = 1;
}

message SetRequest {
  string name = 1;
  string value = 2;
}

message EnableRequest {
  string name = 1;
}

message SettingsResponse {
  repeated Setting settings = 1;

  enum SettingKind {
      // The setting is an enumeration, meaning it's one of a set of values.
      ENUM = 0;
      // The setting is a number.
      NUM = 1;
      // The setting is a boolean.
      BOOL = 2;
      // The setting is a preset.
      PRESET = 3;
  }

  message Setting {
    string name = 1;
    string description = 2;
    SettingKind kind = 3;
    repeated string values = 4;
  }
}

message Triple {
  Architecture architecture         = 1;
  Vendor vendor                     = 2;
  OperatingSystem operating_system  = 3;
  Environment environment           = 4;
  BinaryFormat binary_format        = 5;

  enum Architecture {
    ARCHITECTURE_UNKNOWN = 0;
    ARCHITECTURE_ARM = 1;
    ARCHITECTURE_ARMEB = 2;
    ARCHITECTURE_ARMV4 = 3;
    ARCHITECTURE_ARMV4T = 4;
    ARCHITECTURE_ARMV5T = 5;
    ARCHITECTURE_ARMV5TE = 6;
    ARCHITECTURE_ARMV5TEJ = 7;
    ARCHITECTURE_ARMV6 = 8;
    ARCHITECTURE_ARMV6J = 9;
    ARCHITECTURE_ARMV6K = 10;
    ARCHITECTURE_ARMV6Z = 11;
    ARCHITECTURE_ARMV6KZ = 12;
    ARCHITECTURE_ARMV6T2 = 13;
    ARCHITECTURE_ARMV6M = 14;
    ARCHITECTURE_ARMV7 = 15;
    ARCHITECTURE_ARMV7A = 16;
    ARCHITECTURE_ARMV7VE = 17;
    ARCHITECTURE_ARMV7M = 18;
    ARCHITECTURE_ARMV7R = 19;
    ARCHITECTURE_ARMV7S = 20;
    ARCHITECTURE_ARMV8 = 21;
    ARCHITECTURE_ARMV8A = 22;
    ARCHITECTURE_ARMV81A = 23;
    ARCHITECTURE_ARMV82A = 24;
    ARCHITECTURE_ARMV83A = 25;
    ARCHITECTURE_ARMV84A = 26;
    ARCHITECTURE_ARMV85A = 27;
    ARCHITECTURE_ARMV8M_BASE = 28;
    ARCHITECTURE_ARMV8M_MAIN = 29;
    ARCHITECTURE_ARMV8R = 30;
    ARCHITECTURE_ARMEBV7R = 31;
    ARCHITECTURE_THUMBEB = 32;
    ARCHITECTURE_THUMBV4T = 33;
    ARCHITECTURE_THUMBV6M = 34;
    ARCHITECTURE_THUMBV7A = 35;
    ARCHITECTURE_THUMBV7EM = 36;
    ARCHITECTURE_THUMBV7M = 37;
    ARCHITECTURE_THUMBV7NEON = 38;
    ARCHITECTURE_THUMBV8M_BASE = 39;
    ARCHITECTURE_THUMBV8M_MAIN = 40;
    ARCHITECTURE_AMD_GCN = 41;
    ARCHITECTURE_AARCH64 = 42;
    ARCHITECTURE_AARCH64BE = 43;
    ARCHITECTURE_ASMJS = 44;
    ARCHITECTURE_AVR = 45;
    ARCHITECTURE_HEXAGON = 46;
    ARCHITECTURE_I386 = 47;
    ARCHITECTURE_I586 = 48;
    ARCHITECTURE_I686 = 49;
    ARCHITECTURE_MIPS = 50;
    ARCHITECTURE_MIPSEL = 51;
    ARCHITECTURE_MIPSISA32R6 = 52;
    ARCHITECTURE_MIPSISA32R6EL = 53;
    ARCHITECTURE_MIPS64 = 54;
    ARCHITECTURE_MIPS64EL = 55;
    ARCHITECTURE_MIPSISA64R6 = 56;
    ARCHITECTURE_MIPSISA64R6EL = 57;
    ARCHITECTURE_MSP430 = 58;
    ARCHITECTURE_NVPTX64 = 59;
    ARCHITECTURE_POWERPC = 60;
    ARCHITECTURE_POWERPC64 = 61;
    ARCHITECTURE_POWERPC64LE = 62;
    ARCHITECTURE_RISCV32 = 63;
    ARCHITECTURE_RISCV32GC = 64;
    ARCHITECTURE_RISCV32I = 65;
    ARCHITECTURE_RISCV32IMAC = 66;
    ARCHITECTURE_RISCV32IMC = 67;
    ARCHITECTURE_RISCV64 = 68;
    ARCHITECTURE_RISCV64GC = 69;
    ARCHITECTURE_RISCV64IMAC = 70;
    ARCHITECTURE_S390X = 71;
    ARCHITECTURE_SPARC = 72;
    ARCHITECTURE_SPARC64 = 73;
    ARCHITECTURE_SPARCV9 = 74;
    ARCHITECTURE_WASM32 = 75;
    ARCHITECTURE_WASM64 = 76;
    ARCHITECTURE_X86_64 = 77;
  }

  enum Vendor {
    VENDOR_UNKNOWN = 0;
    VENDOR_AMD = 1;
    VENDOR_APPLE = 2;
    VENDOR_EXPERIMENTAL = 3;
    VENDOR_FORTANIX = 4;
    VENDOR_NVIDIA = 5;
    VENDOR_PC = 6;
    VENDOR_RUMPRUN = 7;
    VENDOR_SUN = 8;
    VENDOR_UWP = 9;
    VENDOR_WRS = 10;
  }

  enum OperatingSystem {
    OPERATING_SYSTEM_UNKNOWN = 0;
    OPERATING_SYSTEM_AMD_HSA = 1;
    OPERATING_SYSTEM_BITRIG = 2;
    OPERATING_SYSTEM_CLOUDABI = 3;
    OPERATING_SYSTEM_CUDA = 4;
    OPERATING_SYSTEM_DARWIN = 5;
    OPERATING_SYSTEM_DRAGONFLY = 6;
    OPERATING_SYSTEM_EMSCRIPTEN = 7;
    OPERATING_SYSTEM_FREEBSD = 8;
    OPERATING_SYSTEM_FUCHSIA = 9;
    OPERATING_SYSTEM_HAIKU = 10;
    OPERATING_SYSTEM_HERMIT = 11;
    OPERATING_SYSTEM_ILLUMOS = 12;
    OPERATING_SYSTEM_IOS = 13;
    OPERATING_SYSTEM_L4RE = 14;
    OPERATING_SYSTEM_LINUX = 15;
    OPERATING_SYSTEM_MACOSX = 16;
    OPERATING_SYSTEM_NEBULET = 17;
    OPERATING_SYSTEM_NETBSD = 18;
    OPERATING_SYSTEM_NONE = 19;
    OPERATING_SYSTEM_OPENBSD = 20;
    OPERATING_SYSTEM_PSP = 21;
    OPERATING_SYSTEM_REDOX = 22;
    OPERATING_SYSTEM_SOLARIS = 23;
    OPERATING_SYSTEM_TVOS = 24;
    OPERATING_SYSTEM_UEFI = 25;
    OPERATING_SYSTEM_VX_WORKS = 26;
    OPERATING_SYSTEM_WASI = 27;
    OPERATING_SYSTEM_WINDOWS = 28;
  }

  enum Environment {
    ENVIRONMENT_UNKNOWN = 0;
    ENVIRONMENT_AMD_GIZ = 1;
    ENVIRONMENT_ANDROID = 2;
    ENVIRONMENT_ANDROIDEABI = 3;
    ENVIRONMENT_EABI = 4;
    ENVIRONMENT_EABIHF = 5;
    ENVIRONMENT_GNU = 6;
    ENVIRONMENT_GNUABI64 = 7;
    ENVIRONMENT_GNUEABI = 8;
    ENVIRONMENT_GNUEABIHF = 9;
    ENVIRONMENT_GNUSPE = 10;
    ENVIRONMENT_GNUX32 = 11;
    ENVIRONMENT_GNU_ILP32 = 12;
    ENVIRONMENT_MACABI = 13;
    ENVIRONMENT_MUSL = 14;
    ENVIRONMENT_MUSLEABI = 15;
    ENVIRONMENT_MUSLEABIHF = 16;
    ENVIRONMENT_MUSLABI64 = 17;
    ENVIRONMENT_MSVC = 18;
    ENVIRONMENT_KERNEL = 19;
    ENVIRONMENT_UCLIBC = 20;
    ENVIRONMENT_UCLIBCEABI = 21;
    ENVIRONMENT_SGX = 22;
    ENVIRONMENT_SOFTFLOAT = 23;
    ENVIRONMENT_SPE = 24;
  }

  enum BinaryFormat {
    BINARY_FORMAT_UNKNOWN = 0;
    BINARY_FORMAT_ELF = 1;
    BINARY_FORMAT_COFF = 2;
    BINARY_FORMAT_MACHO = 3;
    BINARY_FORMAT_WASM = 4;
  }
}
